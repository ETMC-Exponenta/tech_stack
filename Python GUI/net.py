# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'net.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import torch
import torch.nn as nn
#Building custom DataSet
from torch.utils.data import TensorDataset, DataLoader
from torch.utils.data.dataset import random_split

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#Custom modules
from GetData import downloadFile
from Norm import Normalization
from GetResult_BiGRU import getResult

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(402, 293)
        MainWindow.setStyleSheet("background-color: rgb(193, 220, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.M = QtWidgets.QPushButton(self.centralwidget)
        self.M.setGeometry(QtCore.QRect(20, 50, 80, 25))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.M.setFont(font)
        self.M.setStyleSheet("background-color: rgb(231, 225, 255);")
        self.M.setObjectName("M")
        self.Output_delay = QtWidgets.QPushButton(self.centralwidget)
        self.Output_delay.setGeometry(QtCore.QRect(20, 80, 80, 25))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.Output_delay.setFont(font)
        self.Output_delay.setStyleSheet("background-color: rgb(231, 225, 255);")
        self.Output_delay.setObjectName("Output_delay")
        self.P_CONST = QtWidgets.QPushButton(self.centralwidget)
        self.P_CONST.setGeometry(QtCore.QRect(20, 110, 80, 25))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.P_CONST.setFont(font)
        self.P_CONST.setStyleSheet("background-color: rgb(231, 225, 255);")
        self.P_CONST.setObjectName("P_CONST")
        self.R_CONST = QtWidgets.QPushButton(self.centralwidget)
        self.R_CONST.setGeometry(QtCore.QRect(20, 140, 80, 25))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.R_CONST.setFont(font)
        self.R_CONST.setStyleSheet("background-color: rgb(231, 225, 255);")
        self.R_CONST.setObjectName("R_CONST")
        self.Ref = QtWidgets.QPushButton(self.centralwidget)
        self.Ref.setGeometry(QtCore.QRect(20, 170, 80, 25))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.Ref.setFont(font)
        self.Ref.setStyleSheet("background-color: rgb(231, 225, 255);")
        self.Ref.setObjectName("Ref")
        self.Target = QtWidgets.QPushButton(self.centralwidget)
        self.Target.setGeometry(QtCore.QRect(160, 50, 91, 25))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.Target.setFont(font)
        self.Target.setStyleSheet("background-color: rgb(231, 225, 255);")
        self.Target.setObjectName("Target")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 20, 101, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(150, 20, 111, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.GetRes = QtWidgets.QPushButton(self.centralwidget)
        self.GetRes.setGeometry(QtCore.QRect(290, 230, 111, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.GetRes.setFont(font)
        self.GetRes.setStyleSheet("background-color: rgb(255, 204, 0);")
        self.GetRes.setObjectName("GetRes")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #Custom methods
        self.M.clicked.connect(self.pick_M)
        self.Output_delay.clicked.connect(self.pick_Output_delay)
        self.P_CONST.clicked.connect(self.pick_P_CONST)
        self.R_CONST.clicked.connect(self.pick_R_CONST)
        self.Ref.clicked.connect(self.pick_Ref)
        self.Target.clicked.connect(self.pick_Target)
        self.GetRes.clicked.connect(self.backend)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.M.setText(_translate("MainWindow", "M"))
        self.Output_delay.setText(_translate("MainWindow", "Output delay"))
        self.P_CONST.setText(_translate("MainWindow", "P const"))
        self.R_CONST.setText(_translate("MainWindow", "R const"))
        self.Ref.setText(_translate("MainWindow", "Reference"))
        self.Target.setText(_translate("MainWindow", "Ground Truth"))
        self.label.setText(_translate("MainWindow", "Feature Set"))
        self.label_2.setText(_translate("MainWindow", "Outlet Signal"))
        self.GetRes.setText(_translate("MainWindow", "Get Result"))

    def pick_M(self):
        self.m_path = 'data/M_1.csv'
        self.M.setText("M is done!")

    def pick_Output_delay(self):
        self.Output_delay_path = 'data/Output_delayed_1.csv'
        self.Output_delay.setText("Output_delayed is done!")

    def pick_P_CONST(self):
        self.P_CONST_path = 'data/P_CONST_1.csv'
        self.P_CONST.setText("P_CONST is done!")

    def pick_R_CONST(self):
        self.R_CONST_path = 'data/R_CONST_1.csv'
        self.R_CONST.setText("R_CONST is done!")

    def pick_Ref(self):
        self.Ref_path = 'data/Ref_1.csv'
        self.Ref.setText("Ref is done!")

    def pick_Target(self):
        self.Target_path = 'data/Delta_output_1.csv'
        self.Target.setText("Delta_output is done!")


    def backend(self):
        x_data, y_data = downloadFile(time_step=703001, feature=5, toTensor=True,
                                      m_path=self.m_path,
                                      Output_delay_path=self.Output_delay_path,
                                      P_CONST_path=self.P_CONST_path,
                                      R_CONST_path=self.R_CONST_path,
                                      Ref_path=self.Ref_path,
                                      Target_path=self.Target_path)
        x_data, y_data = Normalization(x_data, y_data, shuffle=True, Norm=False)

        print('Размер x_data', x_data.shape)
        print('Размер y_data', y_data.shape)

        x_data_test = x_data
        y_data_test = y_data

        print('Размер x_test', x_data_test.shape)
        print('Размер y_test', y_data_test.shape)

        x_data_test = x_data_test.split(1, dim=0)
        y_data_test = y_data_test.split(1, dim=0)

        if torch.cuda.is_available():
            device = "cuda"
            # device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
            torch.cuda.empty_cache()
            print(torch.cuda.memory_summary(device=None, abbreviated=False))

        class DynamicSysGRU(nn.Module):

            def __init__(self):
                super(DynamicSysGRU, self).__init__()
                self.features = 5
                self.hidden_size = 20
                self.layers = 1
                self.rnn = nn.GRU(self.features, self.hidden_size, self.layers, bidirectional=False)
                self.linear = nn.Linear(self.hidden_size, 1)

            def forward(self, x):
                h0 = torch.randn(1, 703001, self.hidden_size).to(device)
                output, hn = self.rnn(x)
                hn = torch.reshape(hn, (1, 703001, -1))
                output = self.linear(output)  # hn
                return output

        # Loading model
        PATH = 'bi_gru.pt'
        net = DynamicSysGRU().to(device)
        net.load_state_dict(torch.load(PATH))
        net.eval()

        # delta shows you how many sequence to be considered
        tag = 650000  # 650000
        delta = len(x_data_test)
        getResult(net,
                  x_data_test,
                  y_data_test,
                  delta,
                  device,
                  tag)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
